#!/usr/bin/env python3
"""
MEFAPEX Enhanced Question Matching Test Script
Test the new fuzzy matching and semantic search capabilities
"""

import sys
import os
import logging

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_enhanced_content_manager():
    """Test the enhanced content manager with fuzzy matching"""
    
    print("üß™ MEFAPEX Enhanced Question Matching Test")
    print("=" * 80)
    
    try:
        from content_manager import content_manager
        
        # Test cases with expected results
        test_cases = [
            # √áalƒ±≈üma saatleri - fuzzy matching testleri
            ("√ßalƒ±≈üma saatleri nelerdir?", "working_hours", "Normal Turkish"),
            ("calisma saatleri nedir?", "working_hours", "No Turkish chars"),
            ("calƒ±≈üma saatleri", "working_hours", "Mixed Turkish chars"),
            ("i≈ü saatleri ka√ß?", "working_hours", "Synonym: i≈ü"),
            ("ne zaman a√ßƒ±ksƒ±nƒ±z?", "working_hours", "Different pattern"),
            ("working hours nedir?", "working_hours", "English + Turkish"),
            ("mesai saatleri", "working_hours", "Synonym: mesai"),
            ("ofis saatleri nedir", "working_hours", "Synonym: ofis"),
            ("saat ka√ßta a√ßƒ±k", "working_hours", "Short form"),
            ("ka√ßta kapanƒ±yorsunuz", "working_hours", "Closing time"),
            
            # ≈ûirket bilgileri
            ("mefapex nedir?", "company_info", "Company info"),
            ("≈üirket hakkƒ±nda bilgi", "company_info", "About company"),
            ("firma ne yapƒ±yor?", "company_info", "What does company do"),
            
            # Teknik destek
            ("teknik destek nasƒ±l alabilirim?", "support_types", "Tech support"),
            ("yardƒ±ma ihtiyacƒ±m var", "support_types", "Need help"),
            ("problem √ß√∂z√ºm√º", "support_types", "Problem solving"),
            
            # Selamlama
            ("merhaba", "greetings", "Greeting"),
            ("selam nasƒ±lsƒ±n?", "greetings", "Hello"),
            ("g√ºnaydƒ±n", "greetings", "Good morning"),
            
            # Te≈üekk√ºr
            ("te≈üekk√ºrler", "thanks_goodbye", "Thanks"),
            ("saƒüol", "thanks_goodbye", "Thanks informal"),
            
            # Edge cases - should not match strongly
            ("bug√ºn hava nasƒ±l?", "default", "Weather - should be default"),
            ("futbol ma√ßƒ±", "default", "Football - should be default")
        ]
        
        print(f"Testing {len(test_cases)} cases...")
        print()
        
        correct_matches = 0
        enhanced_matches = 0
        
        def check_response_category(response_text: str, expected: str) -> bool:
            """Response i√ßeriƒüine bakarak doƒüru kategoriyi tespit et"""
            response_lower = response_text.lower()
            
            if expected == "working_hours":
                return any(keyword in response_lower for keyword in [
                    "√ßalƒ±≈üma saatleri", "ofis saatleri", "pazartesi", "cuma", "09:00", "18:00"
                ])
            elif expected == "company_info":
                return any(keyword in response_lower for keyword in [
                    "mefapex", "bili≈üim teknolojileri", "≈üirket", "hizmet alanlarƒ±mƒ±z"
                ])
            elif expected == "support_types":
                return any(keyword in response_lower for keyword in [
                    "teknik destek", "yazƒ±lƒ±m desteƒüi", "sistem desteƒüi", "destek t√ºrleri"
                ])
            elif expected == "greetings":
                return any(keyword in response_lower for keyword in [
                    "merhaba", "ho≈ü geldiniz", "asistanƒ±yƒ±m", "ben mefapex"
                ])
            elif expected == "thanks_goodbye":
                return any(keyword in response_lower for keyword in [
                    "rica ederim", "te≈üekk√ºr", "iyi √ßalƒ±≈ümalar"
                ])
            elif expected == "default":
                return any(keyword in response_lower for keyword in [
                    "√ºzg√ºn√ºm", "hazƒ±r bir cevabƒ±m", "daha spesifik", "bilgi tabanƒ±mƒ±zda"
                ])
            
            return False
        
        for i, (question, expected, description) in enumerate(test_cases, 1):
            response, source = content_manager.find_response(question)
            
            # Check if match is correct by looking at response content
            is_correct = check_response_category(response, expected)
            
            is_enhanced = "enhanced" in source
            
            if is_correct:
                correct_matches += 1
                status = "‚úÖ PASS"
            else:
                status = "‚ùå FAIL"
                
            if is_enhanced:
                enhanced_matches += 1
                status += " üß†"
            
            print(f"{i:2d}. {status} | {description}")
            print(f"    Q: {question}")
            print(f"    Expected: {expected}")
            print(f"    Got: {source}")
            print(f"    Preview: {response[:60]}...")
            print()
        
        # Results
        accuracy = (correct_matches / len(test_cases)) * 100
        enhanced_rate = (enhanced_matches / len(test_cases)) * 100
        
        print("üìä TEST RESULTS:")
        print(f"    Total Tests: {len(test_cases)}")
        print(f"    Correct: {correct_matches}")
        print(f"    Accuracy: {accuracy:.1f}%")
        print(f"    Enhanced Matches: {enhanced_matches}")
        print(f"    Enhanced Rate: {enhanced_rate:.1f}%")
        
        # System stats
        stats = content_manager.get_stats()
        print(f"\nüìà SYSTEM STATS:")
        print(f"    Enhanced Matcher: {'‚úÖ' if stats.get('enhanced_matcher_enabled') else '‚ùå'}")
        print(f"    AI Models: {'‚úÖ' if stats.get('huggingface_available') else '‚ùå'}")
        print(f"    Cache Entries: {stats.get('cache_entries', 0)}")
        
        if 'query_stats' in stats:
            query_stats = stats['query_stats']
            print(f"    Total Queries: {query_stats.get('total_queries', 0)}")
            print(f"    Enhanced Matches: {query_stats.get('enhanced_matches', 0)}")
            print(f"    Cache Hits: {query_stats.get('cache_hits', 0)}")
        
        return accuracy >= 85  # 85% threshold for success
        
    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_enhanced_question_matcher_standalone():
    """Test the enhanced question matcher independently"""
    
    print("\nüß† Enhanced Question Matcher Standalone Test")
    print("=" * 60)
    
    try:
        from enhanced_question_matcher import test_enhanced_question_matching
        success = test_enhanced_question_matching()
        
        if success:
            print("‚úÖ Enhanced Question Matcher test passed!")
        else:
            print("‚ùå Enhanced Question Matcher test failed!")
            
        return success
        
    except Exception as e:
        print(f"‚ùå Standalone test failed: {e}")
        return False

def benchmark_performance():
    """Benchmark the performance of the enhanced system"""
    
    print("\n‚ö° Performance Benchmark")
    print("=" * 40)
    
    try:
        from content_manager import content_manager
        import time
        
        # Test queries
        queries = [
            "√ßalƒ±≈üma saatleri nelerdir?",
            "calisma saatleri",
            "mefapex nedir",
            "teknik destek",
            "merhaba"
        ] * 4  # 20 queries total
        
        start_time = time.time()
        
        for query in queries:
            content_manager.find_response(query)
        
        end_time = time.time()
        total_time = end_time - start_time
        avg_time = total_time / len(queries)
        
        print(f"Total queries: {len(queries)}")
        print(f"Total time: {total_time:.3f}s")
        print(f"Average time per query: {avg_time:.3f}s")
        print(f"Queries per second: {len(queries)/total_time:.1f}")
        
        # Acceptable performance: < 100ms per query
        return avg_time < 0.1
        
    except Exception as e:
        print(f"‚ùå Performance test failed: {e}")
        return False

def main():
    """Main test function"""
    
    print("üöÄ MEFAPEX Enhanced Question Matching - Comprehensive Test Suite")
    print("=" * 80)
    
    all_tests_passed = True
    
    # Test 1: Enhanced Content Manager
    print("TEST 1: Enhanced Content Manager with Fuzzy Matching")
    test1_passed = test_enhanced_content_manager()
    all_tests_passed = all_tests_passed and test1_passed
    
    # Test 2: Standalone Enhanced Question Matcher
    print("\nTEST 2: Enhanced Question Matcher Standalone")
    test2_passed = test_enhanced_question_matcher_standalone()
    all_tests_passed = all_tests_passed and test2_passed
    
    # Test 3: Performance Benchmark
    print("\nTEST 3: Performance Benchmark")
    test3_passed = benchmark_performance()
    all_tests_passed = all_tests_passed and test3_passed
    
    # Final Results
    print("\n" + "=" * 80)
    if all_tests_passed:
        print("üéâ ALL TESTS PASSED! Enhanced question matching is working correctly!")
        print("‚úÖ Fuzzy matching enabled")
        print("‚úÖ Semantic search enabled") 
        print("‚úÖ Turkish character tolerance enabled")
        print("‚úÖ Synonym expansion enabled")
        print("‚úÖ Performance acceptable")
        print("\nüîß System ready for production!")
    else:
        print("üí• SOME TESTS FAILED! Please check the issues above.")
        print("‚ùå System needs improvement before production use.")
    
    return 0 if all_tests_passed else 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
