#!/bin/bash

# üê≥ MEFAPEX PostgreSQL Docker Startup Script
# ===========================================

set -e

echo "üöÄ Starting MEFAPEX ChatBox with PostgreSQL"
echo "============================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker is not running. Please start Docker first.${NC}"
    exit 1
fi

# Check if docker compose is available (new or old syntax)
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker is not installed. Please install Docker.${NC}"
    exit 1
fi

# Use modern docker compose syntax
DOCKER_COMPOSE_CMD="docker compose"
if ! docker compose version &> /dev/null; then
    # Fallback to older docker-compose if available
    if command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker-compose"
    else
        echo -e "${RED}‚ùå Docker Compose is not available. Please install Docker Compose.${NC}"
        exit 1
    fi
fi

echo -e "${BLUE}üìã Pre-flight Checks...${NC}"

# Create necessary directories
mkdir -p data logs models_cache content backup

# Copy environment file if it doesn't exist
if [ ! -f .env ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No .env file found, copying from .env.docker${NC}"
    cp .env.docker .env
    echo -e "${GREEN}‚úÖ Created .env file${NC}"
fi

# Backup existing SQLite data if it exists
if [ -f "mefapex.db" ]; then
    echo -e "${YELLOW}üì¶ Backing up existing SQLite database...${NC}"
    cp mefapex.db backup/mefapex_$(date +%Y%m%d_%H%M%S).db
    echo -e "${GREEN}‚úÖ SQLite database backed up${NC}"
fi

echo -e "${BLUE}üê≥ Building Docker images...${NC}"
$DOCKER_COMPOSE_CMD build --no-cache

echo -e "${BLUE}üöÄ Starting services...${NC}"
$DOCKER_COMPOSE_CMD up -d

echo -e "${GREEN}‚úÖ Services started successfully!${NC}"
echo ""
echo -e "${BLUE}üìä Service Status:${NC}"
$DOCKER_COMPOSE_CMD ps

echo ""
echo -e "${GREEN}üéâ MEFAPEX ChatBox is now running!${NC}"
echo ""
echo -e "${BLUE}Access Points:${NC}"
echo "üåê Application: http://localhost:8000"
echo "üìö API Docs: http://localhost:8000/docs"
echo "üè• Health Check: http://localhost:8000/health"
echo "üóÑÔ∏è PostgreSQL: localhost:5432"
echo "üîç Qdrant: http://localhost:6333"
echo "üì¶ Redis: localhost:6379"
echo ""
echo -e "${BLUE}üìã Useful Commands:${NC}"
echo "üìä View logs: $DOCKER_COMPOSE_CMD logs -f"
echo "üîß Enter app container: $DOCKER_COMPOSE_CMD exec mefapex-app bash"
echo "üóÑÔ∏è Access PostgreSQL: $DOCKER_COMPOSE_CMD exec postgres psql -U mefapex -d mefapex_chatbot"
echo "üõë Stop services: $DOCKER_COMPOSE_CMD down"
echo "üóëÔ∏è Remove all data: $DOCKER_COMPOSE_CMD down -v"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Important Notes:${NC}"
echo "‚Ä¢ This setup uses PostgreSQL exclusively"
echo "‚Ä¢ SQLite support has been completely removed"
echo "‚Ä¢ Change default passwords in .env for production"
echo "‚Ä¢ Data is persisted in Docker volumes"
echo ""

# Wait a moment for services to start
sleep 5

# Check if services are healthy
echo -e "${BLUE}üè• Health Check...${NC}"
if curl -s http://localhost:8000/health > /dev/null; then
    echo -e "${GREEN}‚úÖ Application is healthy and responding${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Application may still be starting up...${NC}"
    echo "   Check logs with: docker-compose logs -f mefapex-app"
fi

echo ""
echo -e "${GREEN}üöÄ Deployment Complete!${NC}"
