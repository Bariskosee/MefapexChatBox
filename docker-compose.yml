version: '3.8'

services:
  # üöÄ Main FastAPI Application
  mefapex-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mefapex-chatbox
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - DATABASE_TYPE=postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-mefapex}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mefapex_secure_password}
      - POSTGRES_DB=${POSTGRES_DB:-mefapex_chatbot}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USE_OPENAI=${USE_OPENAI:-false}
      - USE_HUGGINGFACE=${USE_HUGGINGFACE:-true}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8000}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
    volumes:
      - ./data:/app/data
      - ./models_cache:/app/models_cache
      - ./logs:/app/logs
      - ./content:/app/content
    depends_on:
      - postgres
      - qdrant
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mefapex-network

  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mefapex-postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mefapex_chatbot}
      - POSTGRES_USER=${POSTGRES_USER:-mefapex}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mefapex_secure_password}
      - POSTGRES_INITDB_ARGS="--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mefapex} -d ${POSTGRES_DB:-mefapex_chatbot}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - mefapex-network

  # üóÑÔ∏è Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: mefapex-qdrant
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    networks:
      - mefapex-network

  # üóÇÔ∏è Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: mefapex-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - mefapex-network

  # üìä Nginx Reverse Proxy (Production only)
  nginx:
    image: nginx:alpine
    container_name: mefapex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/html/static:ro
    depends_on:
      - mefapex-app
    restart: unless-stopped
    networks:
      - mefapex-network
    profiles:
      - production

  # üìà Monitoring (Production only)
  monitoring:
    image: prom/prometheus:latest
    container_name: mefapex-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - mefapex-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  mefapex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
