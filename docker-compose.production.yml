version: '3.8'

services:
  # üóÑÔ∏è PostgreSQL Database (Primary Production Database)
  postgres:
    image: postgres:15-alpine
    container_name: mefapex-postgres
    environment:
      POSTGRES_DB: mefapex_chatbot
      POSTGRES_USER: mefapex
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_this}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mefapex -d mefapex_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - mefapex-network
    # Production optimizations
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # üöÄ Main FastAPI Application
  mefapex-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mefapex-chatbox
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      
      # Database Configuration (PostgreSQL Primary)
      - DATABASE_TYPE=postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=mefapex
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_this}
      - POSTGRES_DB=mefapex_chatbot
      
      # Backup database URL format
      - DATABASE_URL=postgresql://mefapex:${POSTGRES_PASSWORD:-secure_password_change_this}@postgres:5432/mefapex_chatbot
      
      # Vector Database
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      
      # Cache
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # AI Configuration
      - USE_OPENAI=false
      - USE_HUGGINGFACE=true
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-generate-secure-key-for-production}
      - CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
      - ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
      
      # Performance
      - MAX_WORKERS=4
      - WORKER_CONNECTIONS=1000
      
    volumes:
      - ./models_cache:/app/models_cache
      - ./logs:/app/logs
      - ./data:/app/data  # For file uploads, etc.
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mefapex-network
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # üóÑÔ∏è Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: mefapex-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__SERVICE__ENABLE_CORS=true
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    networks:
      - mefapex-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # üóÇÔ∏è Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: mefapex-redis
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --databases 16
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - mefapex-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # üìä Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: mefapex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/html/static:ro
    depends_on:
      - mefapex-app
    restart: unless-stopped
    networks:
      - mefapex-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # üìà Monitoring Dashboard (Optional)
  monitoring:
    image: prom/prometheus:latest
    container_name: mefapex-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=1GB'
    restart: unless-stopped
    networks:
      - mefapex-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # üîç Database Administration Tool (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mefapex-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@mefapex.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password_change_this}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - mefapex-network
    # Only enable in development
    profiles:
      - admin
      - development

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker-volumes/postgres
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker-volumes/qdrant
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker-volumes/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker-volumes/prometheus
  pgadmin_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker-volumes/pgadmin

# Production network configuration
networks:
  mefapex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: mefapex-bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
