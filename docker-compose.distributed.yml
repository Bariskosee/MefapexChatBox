# Docker Compose for Distributed WebSocket Testing
version: '3.8'

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mefapex-network

  mefapex-app:
    build: .
    ports:
      - "8000-8003:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DISTRIBUTED_WEBSOCKET_ENABLED=true
      - WORKERS=2
      - DEBUG_MODE=true
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=mefapex_chatbot
      - POSTGRES_USER=mefapex
      - POSTGRES_PASSWORD=mefapex
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    deploy:
      replicas: 2
    networks:
      - mefapex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=mefapex_chatbot
      - POSTGRES_USER=mefapex
      - POSTGRES_PASSWORD=mefapex
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mefapex -d mefapex_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mefapex-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx-distributed.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - mefapex-app
    networks:
      - mefapex-network

volumes:
  redis_data:
  postgres_data:

networks:
  mefapex-network:
    driver: bridge
